// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// =========================
// NextAuth Models
// =========================
model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           String           @default("user")

  accounts       Account[]
  sessions       Session[]

  kegiatan       Kegiatan[]
  logAktivitas   LogAktivitas[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =========================
// App Models
// =========================

model Kegiatan {
  id           String       @id @default(cuid())
  nama         String
  deskripsi    String?
  startDate    DateTime
  endDate      DateTime
  indikator    Indikator[]  // 1 kegiatan bisa punya banyak indikator
  proyek       Proyek[]     // 1 kegiatan bisa punya banyak proyek
  createdBy    User         @relation(fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Indikator {
  id         String    @id @default(cuid())
  nama       String    // misal: "IKU", "RK", dll
  target     Float
  realisasi  Float?
  kegiatan   Kegiatan  @relation(fields: [kegiatanId], references: [id])
  kegiatanId String
}

model Proyek {
  id         String    @id @default(cuid())
  nama       String
  deskripsi  String?
  kegiatan   Kegiatan  @relation(fields: [kegiatanId], references: [id])
  kegiatanId String
  startDate  DateTime
  endDate    DateTime
}

model LogAktivitas {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  aksi      String
  createdAt DateTime @default(now())
}
